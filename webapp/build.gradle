plugins {
  id 'war'
  id "org.akhikhl.gretty" version "2.0.0"
}

apply from: "${project.rootDir}/gradle/i2p-make-plugin.gradle"

archivesBaseName = 'i2pbote'

configurations {
    jasper
}

def jspcDir = "$buildDir/jspc"
def webXmlFrag = "$buildDir/web-fragment.xml"

task precompileJsp {
    outputs.dir(jspcDir)
    doLast {
        ant.taskdef(classname: 'org.apache.jasper.JspC',
                    name: 'jasper',
                    classpath: sourceSets.jsp.compileClasspath.asPath)
        ant.jasper(validateXml: false,
                   package: 'i2p.bote.jsp',
                   uriRoot: webAppDir,
                   webXmlFragment: webXmlFrag,
                   outputDir: jspcDir)
    }
}

def messagesDir = project.file("$buildDir/messages-src")
sourceSets {
    jsp {
        compileClasspath += configurations.compile +
                            sourceSets.main.output +
                            configurations.jasper
        java {
            srcDir jspcDir
        }
    }
    poupdate {
        compileClasspath += configurations.compile
    }
    messages {
        java {
            srcDir messagesDir
        }
    }
}

precompileJsp.dependsOn compileJava
compileJspJava.dependsOn precompileJsp

def jamesArchive = 'cache/james-server-app-3.0.0-beta5-20150627.102412-1076-app.zip'
// James snapshots are only kept for a few days. The URL below points to a copy
// of the 6/27/2015 snapshot.
// To be replaced with a repository.apache.org URL once beta5 is out.
def jamesUrl = 'https://download.i2p2.de/mirror/lib/james-server-app-3.0.0-beta5-20150627.102412-1076-app.zip'

task downloadJames {
    outputs.file(jamesArchive)

    doLast {
        println 'Downloading Apache James...'
        mkdir('cache')
        ant.get(src: jamesUrl, dest: jamesArchive, verbose: 'on', skipexisting: 'true')
    }
}

task extractJames(dependsOn: downloadJames, type: Copy) {
    outputs.dir('libs')
    from {
        // This additional closure is necessary to prevent Gradle from eagerly
        // evaluating the zipTree, before the archive has been downloaded
        def zipFile = downloadJames.outputs.files.filter { zip ->
            zip.name.startsWith('james-server-app')
        }[0]
        zipTree(zipFile).files
    }
    into 'libs'
    include '**/apache-james-mailbox-api-0.6-20150508.040939-710.jar'
    include '**/apache-james-mailbox-store-0.6-20150508.041003-704.jar'
    include '**/james-server-filesystem-api-3.0.0-beta5-SNAPSHOT.jar'
    include '**/james-server-lifecycle-api-3.0.0-beta5-SNAPSHOT.jar'
    include '**/james-server-protocols-imap4-3.0.0-beta5-SNAPSHOT.jar'
    include '**/james-server-protocols-library-3.0.0-beta5-SNAPSHOT.jar'
    include '**/james-server-util-3.0.0-beta5-SNAPSHOT.jar'
    include '**/protocols-api-1.6.4-20150617.121129-1080.jar'
    include '**/protocols-imap-1.6.4-20150617.121245-927.jar'
    include '**/protocols-netty-1.6.4-20150617.121137-1044.jar'
}

dependencies {
    jasper 'org.mortbay.jasper:apache-el:8.0.33'
    jasper 'org.mortbay.jasper:apache-jsp:8.0.33'

    compile project(':core')

    implementation "net.i2p.client:mstreaming:$rootProject.i2pVersion"

    implementation 'org.apache.tomcat:tomcat-jsp-api:8.0.33'
    implementation 'org.apache.tomcat:tomcat-servlet-api:8.0.33'
    compile 'org.jfree:jcommon:1.0.23'
    compile 'org.jfree:jfreechart:1.0.19'
    compile 'org.owasp:csrfguard:3.1.0'
    compile('org.subethamail:subethasmtp:3.1.7') {
        exclude group: 'javax.mail', module: 'mail'
        exclude group: 'javax.activation', module: 'activation'
    }
    compile 'com.lambdaworks:scrypt:1.4.0'
    compile 'com.sun.mail:smtp:1.5.6'

    compile 'javax.servlet:jstl:1.2'

    // Apache James IMAP server
    compile files('libs/apache-james-mailbox-api-0.6-20150508.040939-710.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/apache-james-mailbox-store-0.6-20150508.041003-704.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/james-server-filesystem-api-3.0.0-beta5-SNAPSHOT.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/james-server-lifecycle-api-3.0.0-beta5-SNAPSHOT.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/james-server-protocols-imap4-3.0.0-beta5-SNAPSHOT.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/james-server-protocols-library-3.0.0-beta5-SNAPSHOT.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/james-server-util-3.0.0-beta5-SNAPSHOT.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/protocols-api-1.6.4-20150617.121129-1080.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/protocols-imap-1.6.4-20150617.121245-927.jar') {
        builtBy tasks.extractJames
    }
    compile files('libs/protocols-netty-1.6.4-20150617.121137-1044.jar') {
        builtBy tasks.extractJames
    }

    // Apache James IMAP server dependencies
    compile 'com.beetstra.jutf7:jutf7:1.0.0'
    compile 'commons-codec:commons-codec:1.7'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'commons-configuration:commons-configuration:1.9'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-logging:commons-logging:1.0.3'
    compile 'io.netty:netty:3.3.1.Final'
    compile 'log4j:log4j:1.2.17'
    compile 'org.apache.james:apache-mime4j-core:0.7.2' // Not what is included in the zip
    compile 'org.slf4j:slf4j-api:1.7.2'
    compile 'org.slf4j:slf4j-log4j12:1.7.2'

    runtime 'net.i2p:servlet-i2p:0.9.30'
}

def stringsDir = project.file("$buildDir/strings")
def potFile = project.file("$stringsDir/test.pot")
task createStringsDir {
    doLast {
        mkdir(stringsDir)
    }
}

task javaStrings(type: Exec, dependsOn: [createStringsDir, compilePoupdateJava]) {
    outputs.files potFile
    executable 'xgettext'
    args '-F',
            '-L', 'java',
            '--from-code=UTF-8',
            '--keyword=_t',
            '--keyword=_x',
            '-o', potFile
    args sourceSets.main.java.collect { File file ->
        file.absolutePath.substring(projectDir.absolutePath.length()+1)
    }
}

task jspStrings(type: JavaExec, dependsOn: javaStrings) {
    main = 'i2p.bote.ant.JspStrings'
    classpath = configurations.compile + sourceSets.poupdate.output
    args webAppDirName
    standardOutput = new ByteArrayOutputStream()
    workingDir projectDir

    doLast {
        potFile.append(standardOutput.toString())
        exec {
            executable 'msguniq'
            args '-o', potFile, potFile
    implementation 'com.lambdaworks:scrypt:1.4.0'
        }
    }
}

task poupdate(dependsOn: jspStrings) {
    doLast {
        fileTree("$projectDir/src/main/locale").include('**/messages_*.po').each { File file ->
            exec {
                executable 'msgmerge'
                args '-U',
                        '--backup=none',
                        file,
                        potFile
            }
        }
    }
}

task generateMessagesJava {
    doLast {
        fileTree("$projectDir/src/main/locale").include('**/messages_*.po').each { File file ->
            def lg = file.name.find(/messages_(.*).po/, { full, lang ->
                lang
            })
            mkdir(messagesDir)
            exec {
                executable 'msgfmt'
                args '--java',
                        '--statistics',
                        '--source',
                        '-r', 'i2p.bote.locale.Messages',
                        '-l', lg,
                        '-d', temporaryDir,
                        file
            }
            copy {
                from temporaryDir
                into messagesDir
            }
            delete(temporaryDir)
        }
    }
}
compileMessagesJava.dependsOn generateMessagesJava

war {
    archiveName 'i2pbote.war'
    exclude '*.jsp'
    exclude 'WEB-INF/tags*'
    exclude 'WEB-INF/tlds*'
    classpath sourceSets.jsp.output
    classpath sourceSets.messages.output
    dependsOn jspClasses
    filesMatching('**/*.xml') {
        filter { String line ->
            if (line == '    <!-- precompiled servlets -->')
                new File(webXmlFrag).text
            else
                line
        }
    }
    webInf {
        from 'src/main/webapp/WEB-INF/tlds'
    }
}

thinWar {
    archiveName 'i2pbote.war'
    exclude '*.jsp'
    exclude 'WEB-INF/tags*'
    exclude 'WEB-INF/tlds*'
    classpath sourceSets.jsp.output
    classpath sourceSets.messages.output
    dependsOn jspClasses
    filesMatching('**/*.xml') {
        filter { String line ->
            if (line == '    <!-- precompiled servlets -->')
                new File(webXmlFrag).text
            else
                line
        }
    }
    webInf {
        from 'src/main/webapp/WEB-INF/tlds'
    }
}

i2p {
    plugin {
        name 'i2pbote'
        signer 'str4d@mail.i2p'
        version project.version

        author 'str4d@mail.i2p'
        websiteUrl 'http://bote.i2p/'
        su3UpdateUrl 'http://bote.i2p/i2pbote-update.su3'
        license 'GPLv3'

        minI2PVersion '0.9.30'
        minJavaVersion '1.7'
        minJettyVersion '9'

        console {
            webapp {
                includeTaglib true
            }
        }
    }
}

gretty {
    contextPath "/$project.i2p.plugin.name"
}

